#!/bin/bash
set -xe


# Install gcloud CLI if not available (for Ubuntu-based systems)
if ! command -v gcloud &> /dev/null; then
  echo "gcloud not found, installing..."
  sudo apt-get update && sudo apt-get install -y curl apt-transport-https gnupg
  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
  sudo apt-get update && sudo apt-get install -y google-cloud-sdk
fi


# Expect that your service account JSON is stored in a CI secret.
# Write the service account JSON content (from a secret, for example) to a file.
echo "$GCP_SA_JSON" > "$HOME/gcloud.json"

# Set the environment variable so that gcloud and client libraries pick it up.
export GOOGLE_APPLICATION_CREDENTIALS="$HOME/gcloud.json"

# Activate the service account using the JSON key.
gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"

# export DOCKER_REGISTRY="europe-docker.pkg.dev"

# Configure Docker to use gcloud as a credential helper for your registry.
# Make sure that DOCKER_REGISTRY is set to your Artifact Registry domain (e.g. "europe-docker.pkg.dev").
gcloud auth configure-docker "$DOCKER_REGISTRY" --quiet


# Get a fresh access token using your service account credentials.
ACCESS_TOKEN=$(gcloud auth print-access-token)

# Create a Docker config that includes the token directly.
mkdir -p $HOME/.docker
cat > $HOME/.docker/config.json <<EOF
{
  "auths": {
    "$DOCKER_REGISTRY": {
      "username": "oauth2accesstoken",
      "password": "$ACCESS_TOKEN"
    }
  }
}
EOF

# Continue with your existing variables and tag calculations.
BRANCH_NAME=$(echo "$GIT_REF" | sed 's/[^a-zA-Z0-9]/-/g')
CURRENT_DATE=$(date -u +"%Y%m%d")
CURRENT_TIME=$(date -u +"%H%M%S")
PR_SHA=$(echo "$1" | cut -c1-7)
GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
DOCKER_TAG="${DOCKER_IMAGE_NAME}:${BRANCH_NAME}"
DOCKER_TAG_WITH_DATE="${DOCKER_IMAGE_NAME}:${BRANCH_NAME}-${CURRENT_DATE}-${CURRENT_TIME}"
DOCKER_TAG_WITH_PR_SHA="${DOCKER_IMAGE_NAME}:pr${PR_SHA}"

if [ -n "$GIT_TAG" ]; then
  DOCKER_TAG_WITH_GIT_TAG="${DOCKER_IMAGE_NAME}:${GIT_TAG}"
fi

# Optionally, ensure a cache directory exists
mkdir -p .cache

# Run Kaniko using the Docker config generated by gcloud.
docker run --rm \
  -v "$(pwd)":/workspace \
  -v "$(pwd)/.cache":/cache \
  -v "$HOME/.docker/config.json":/kaniko/.docker/config.json:ro \
  gcr.io/kaniko-project/executor:v1.23.2 \
  --context . \
  --build-arg GITHUB_PAT="$GITHUB_PAT" \
  --dockerfile /workspace/"$DOCKERFILE" \
  --destination "$DOCKER_TAG" \
  --destination "$DOCKER_TAG_WITH_DATE" \
  --destination "$DOCKER_TAG_WITH_PR_SHA" \
  $( [ -n "$GIT_TAG" ] && echo "--destination $DOCKER_TAG_WITH_GIT_TAG" ) \
  --cache=true \
  --cache-dir=/cache \
  --use-new-run \
  --single-snapshot \
  --snapshot-mode=redo \
  --compressed-caching=false \
  --cleanup \
  --cache-repo="$DOCKER_IMAGE_NAME"

echo "Image pushed to registry: $DOCKER_TAG"
if [ -n "$GIT_TAG" ]; then
  echo "Image also tagged with Git tag: $DOCKER_TAG_WITH_GIT_TAG"
fi
